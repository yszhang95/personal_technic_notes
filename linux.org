#+TITLE: Linux tips
* Text manipulation
** =sed=
*** Print
    Try =/pattern/p=. Address can be used.
    #+begin_example
    sed -n "/^#/p" input_file # -n help you supress the output
    #+end_example
    Suppose we have an example file the same as the one in [[SED-SCRIPTS]].
    Run with command =sed -n '/1-/,/2-/p' example.txt=.
    and

*** Replacement
    Try =s/pattern/replacement/option=. And you can preceed address
    (=man sed=) to =s=. Here, =option= can be =g=, similar to =vim=.
    =pattern= is written in format of regular expression.  You can use
    =&= and =\1= to =\9= to denote the matched portion of =pattern= in
    =replacement=.  For instance, if you want to replace =-= in the
    first part of =1-2-3-4 1E-10=. Let us do the following,
    #+begin_src shell
    cat > example.txt
    1-2-3-4 1E-10
    ^D
    sed -E 's/([^E])-/\1 /g' example.txt # -E or -r means extended-regular-expressions
    #+end_src
    Suppose we have an example file the same as the one in [[SED-SCRIPTS]]. Run
    =sed -E '/^1/,/^2/s/^([0-9])-([0-9])-([0-9])-([0-9])/\1,\2,\3,\4/' example.txt=.
*** Scripts
    <<SED-SCRIPTS>>
    A simple example of sequential replacement.Supposing that
    we have an example file =example.txt= having the following content,
    #+begin_example
    1-2-3-4 1E-10
    2-3-4-5 2E10
    3-4-5-6 3E-99
    #+end_example
    write in the file
    =sed-example.bash= the following content:
    #+begin_example
      #!/usr/bin/bash
      # or /bin/bash, depending on the system
      # -i means in-place, do not use it if you are not sure you are doing
      # the correct things
      sed -iE '
      1,1s/([^E])-/\1 /g
      2,2s/([^E])-/\1~/g
      3,3s/([^E])-/\1./g
      ' $@
    #+end_example
    And execute ~chmod +x sed-example.bash~ and =./sed-example.bash
    example.txt=. The output will look like
    #+begin_example
    1 2 3 4 1E-10
    2~3~4~5 2E10
    3.4.5.6 3E-99
    #+end_example
* Windows subsystem (WSL)
** Fedora
*** Installations
    Please consult this [[https://www.reddit.com/r/Fedora/comments/ii3tor/install_fedora_32_or_33_on_windows_10_wsl_2/][post]] and this [[https://dev.to/bowmanjd/install-fedora-on-windows-subsystem-for-linux-wsl-4b26][link]].
*** Some configurations after installations
    Create or edit the file =/etc/wsl.conf=.
    Append to =wsl.conf= the following content:
    #+BEGIN_EXAMPLE
[automount]
enabled = true
options = "metadata,umask=22,fmask=111"

[interop]
appendWindowsPath = false
    #+END_EXAMPLE
    
    After setting up ~fmask=111~. I found I could not create any symbolic
    link with correct permission. I finally change it to ~fmask=11~.
        #+BEGIN_EXAMPLE
[automount]
enabled = true
options = "metadata,umask=22,fmask=11"

[interop]
appendWindowsPath = false
    #+END_EXAMPLE

*** Explore linux files using Widows explorer
    Comment out the lines inside =/etc/wsl.conf=,
    #+BEGIN_EXAMPLE
#[interop]
#appendWindowsPath = false
    #+END_EXAMPLE
    And then run =explorer.exe .=. See this [[https://stackoverflow.com/questions/44245721/launching-explorer-from-wsl][post]].

    Or use =PowerShell= to check =WSL= directory outside =Linux=.
    Then you do not have to edit =/etc/wsl.conf=. See this [[https://github.com/microsoft/WSL/issues/4027#issuecomment-494969089][post]].
    Run =dir //wsl$/<your-distro>=. To get =<your-distro>=,
    run =wsl -l= inside =PowerShell=.
*** Windows terminal shortcuts
    If you want to disable some keybindings, like "toggleFullscreen",
    use the following,
    #+begin_example
{ "command": null, "keys": "alt+enter" },
{ "command": null, "keys": "f11" },
    #+end_example
    More actions please see [[https://docs.microsoft.com/en-us/windows/terminal/customize-settings/actions][this link]] and [[https://superuser.com/questions/1558490/how-can-i-remove-a-default-key-binding-in-windows-terminal][this post]].

    For the time being, the shortcut =C-c C-,= in =org-mode= does not work.
    I may give up =Windows Terminal=.
*** =X11= supports
    <<X11-supports-wsl>>
    I followed this [[https://stackoverflow.com/questions/61110603/how-to-set-up-working-x11-forwarding-on-wsl2][link]].
    Append this two lines into ~.bashrc~ or other similar files.
    #+begin_example
export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
export LIBGL_ALWAYS_INDIRECT=1
    #+end_example
    The suggested =X11= application is [[https://sourceforge.net/projects/vcxsrv/][VcXSrv]]. You need to toggle the option
    =Disable access control= when you open it.
*** Change the default shell
    I did not find =chsh= which is supposed to switch shell in some other
    releases of =Linux=. Instead I chose to directly edit =/etc/passwd=.

    I want to try =oh-my-zsh=. I installed =zsh= via =sudo dnf install zsh=.
    And I followed the [[https://ohmyz.sh/#install][link]] to download =oh-my-zsh=. I have not mastered it
    yet. You can read its [[https://github.com/ohmyzsh/ohmyzsh/wiki][wiki]].
*** Terminals
    I can run =gnome-terminal= after running
    #+begin_example
    sudo dnf install gnome-terminal dbus dbus-x11
    #+end_example
    After setting up the environment variable following [[X11-supports-wsl]]
    (or try another way), =gnome-terminal= can work.

    If you do not write those two lines (see [[X11-supports-wsl]])
    into =.bashrc=. You may face errors like
    #+begin_example
libGL error: No matching fbConfigs or visuals found
libGL error: failed to load driver: swrast
    #+end_example
    To fix it, you may try =sudo dnf install mesa-dri-drivers=.
    If it does not work, you can try
    #+begin_example
DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0 LIBGL_ALWAYS_INDIRECT=1 dbus-launch gnome-terminal
    #+end_example

    I have not found a way successfully starting terminal from windows
    shortcuts.

    I successfully run =konsole= from a windows shortcut. Run
    =sudo dnf install konsole dbus dbus-x11=. And then in windows platform,
    create two files. I consulted two links, [[https://itnext.io/using-windows-10-as-a-desktop-environment-for-linux-7b2d8239f2f1][link-1]] and [[https://baroni.tech/posts/best-wsl-terminal/][link-2]]. I post
    scripts here. Script-1 will be used in script-2.

    The content of script-1 (I named it =wsl-runner-app.bat=):
    #+begin_example
@echo off
for /f "tokens=3 delims=: " %%I in ('netsh interface IPv4 show addresses "vEthernet (WSL)" ^| findstr /C:"IP Address"') do set ip==%%I
set ipAddress=%ip:~1%
Powershell.exe wsl "DISPLAY='%ipAddress%':0" %1
    #+end_example
    Script-2 looks like (I named it =runkonsole.vbs=):
    #+begin_example
Function CheckCommandIsRunning(ProcessName)
	sComputerName = "."
	Set objWMIService = GetObject("winmgmts:\\" & sComputerName & "\root\cimv2")
	sQuery = "SELECT * FROM Win32_Process WHERE CommandLine LIKE '%" + ProcessName + "%'"
	Set objItems = objWMIService.ExecQuery(sQuery)
	If objItems.Count > 0 Then
		CheckCommandIsRunning = True
	Else
		CheckCommandIsRunning = False
	End If
	Set objWMIService = Nothing
	Set objItems = Nothing
End Function

Function SilentlyStartCommand(Command)
	Set WshShell = CreateObject("WScript.Shell" )
	WshShell.Run Command, 0 
	Set WshShell = Nothing 
End Function

If Not CheckCommandIsRunning("vcxsrv.exe") Then
	SilentlyStartCommand """C:\Program Files\VcXsrv\vcxsrv.exe"" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl"
	WScript.Sleep 1000
End If

Set oShell = CreateObject ("Wscript.Shell") 
Dim strArgs
strArgs = "cmd /c wsl-runner-app.bat konsole"
oShell.Run strArgs, 0, false
    #+end_example
    It will run =VcXsrv= automatically. But note, if you have already run
    =VcXsrv=, this script will crash. Make sure you do not do that.

    The keybindings of =gnome-terminal=, =konsole= and other terminals does
    not work properly. I cannot type in =C-,=. Instead I will have =,= if
    I typ =C-,=.

    Finally, I switch to =xterm=. It can work properly. I consulted several
    links: [[https://www.reddit.com/r/bashonubuntuonwindows/comments/izo943/setting_default_font_type_and_size_with_vcxsrv/][Reddit-link-for-xterm-configuration]],
    [[https://wiki.archlinux.org/index.php/Xterm][xterm-descriptions-on-ArchLinuxWiki]],
    [[https://wiki.archlinux.org/index.php/X_resources][X-resources-descriptions-on-ArchLinuxWiki]],
    [[https://github.com/Filius-Patris/dotfiles/blob/master/xterm/xdefaults][a-portable-configuration-on-github]] and [[https://www.emacswiki.org/emacs/MetaKeyProblems][Emacs-Meta-Key-Wiki]].
    I post my configurations
    in =~/.Xresources=. To make it take effects, run =xrdb ~/.Xresources=
    or =xrdb -merge ~/.Xresources=. Option =merge= will keep the old and
    append the new (that is why it is called "merge"). The contents of
    =.Xresources= are:
    #+begin_example
Xterm*locale: false
Xterm*utf8: 1
XTerm*renderFont: true

!XTerm*reverseVideo:    on
xterm*VT100.Translations: #override \
                 Ctrl Shift <Key>V:    insert-selection(CLIPBOARD) \n\
                 Ctrl Shift <Key>C:    copy-selection(CLIPBOARD)

! Fonts ====================================================
! set font and fontsize
! XTerm*faceName: DejaVu Sans Mono
XTerm*faceName: Terminus
XTerm*faceSize: 16

! VT Font Menu: Unreadable
xterm*faceSize1: 6
! VT font menu: Tiny
xterm*faceSize2: 8
! VT font menu: Medium
xterm*faceSize3: 10
! VT font menu: Large
xterm*faceSize4: 14
! VT font menu: Huge
xterm*faceSize5: 20

XTerm*termName: xterm-256color
XTerm*metaSendsEscape: true
XTerm*eightBitInput: false

XTerm*saveLines: 4096
XTerm*scrollBar: true
XTerm*scrollbar.width: 8

    #+end_example

    To start =xterm= from =$HOME=, I created a small program using =c++=.
    I create a file called =run_xterm.cpp= and compile it with
    =g++ run_xterm.cpp -o run-xterm=. And put it under =/usr/bin=. Then you
    can replace the line ~strArgs = "cmd /c wsl-runner-app.bat konsole"~
    with =strArgs = "cmd /c wsl-runner-app.bat run-xterm"=. The file content
    of =run_xterm.cpp= are shown below:
    #+begin_src c++
#include <cstdlib>
#include <iostream>

int main()
{
    std::system("cd;xterm /bin/zsh");
}
    #+end_src

    I cannot figure out why the first character in =zsh= would display in
    wrong way. You may consult the [[https://unix.stackexchange.com/questions/90772/first-characters-of-the-command-repeated-in-the-display-when-completing][link]] to solve it. After installing
    =en_US.UTF-8=, I have everything normal. I am not sure whether this
    is the reason. To install the corresponding =locale=, run
    ~sudo dnf install glibc-langpack-en~.

    I append this [[https://github.com/chriskempson/tomorrow-theme/blob/master/Xdefaults/Tomorrow][theme]] to the ~.Xresources~.

*** =man= utilities
    See this [[https://ask.fedoraproject.org/t/wsl-2-and-man-pages/11337][link]]. I quote his words here:
    #+begin_quote
Comment out or remove =tsflags=nodocs= from:
=/etc/dnf/dnf.conf=
Remove and reinstall =man & man-db= and =$ man man= now works as expected.
Because the =rootfs= system is being borrowed from a container project,
docs are turned off by default to save space. If you have any packages
already install and you require the man pages,
it will need to be reinstalled;
so the man pages can be grabbed at install time.
    #+end_quote

*** Upgrade from Fedora 33 to 34
    Please consult this [[https://dev.to/bowmanjd/how-to-upgrade-fedora-in-place-on-windows-subsystem-for-linux-wsl-oh3][link]].

*** File permission
    Please consult this [[https://github.com/Microsoft/WSL/issues/936][issue]]. I tried the [[https://github.com/Microsoft/WSL/issues/936#issuecomment-582904995][combination]] on this page.
    It tells =WSL= not to automount the windows file system in a global
    way but to mount each folder in specific ways via
    : [automount]
    : enabled = false
    : mountFsTab = true
    After this, you need to add the following to =/etc/fstab= (some discussions in
    [[fstab-short-discussions]]):
    : c: /C drvfs rw,noatime,uid=1000,gid=1000,umask=027,fmask=117,metadata 0 0
    : //localhost/c$ /c drvfs ro,noatime,uid=1000,gid=1000,umask=027,fmask=007 0 0
    : /C/Users /c/Users none bind 0 0
    The original post may use =\t= but I am not sure. I have to replace
    multiple whitespaces in his proposed solution by single
    whiespace.
    - The first line ask =WSL= to mount =C:= at =/C=, in read-and-write
      mode. Files are considered as =640= permissions (see the
      masks). You need to create =/C= at first.
    - The second line ask the system to mount =//localhost/c$= at =/c=, in
      read-only mode. The file mode is =750=. The =//localhost/c$= is in
      syntax of network names (I am not sure if this is only for
      Windows).
    - Please notice the difference between the character cases.
    - The third line ask the system bind (not re-mount) the =C:\Users=
      directory from =/C= to =/c=.
    - Please refer to the [[https://man7.org/linux/man-pages/man8/mount.8.html][mount manual]], the [[https://serverfault.com/questions/613179/how-do-i-do-mount-bind-in-etc-fstab][post]], the [[https://askubuntu.com/questions/1119456/how-to-create-a-persistent-mounting-point-in-ubuntu-app-on-windows-10][question]], and
      windows [[https://docs.microsoft.com/en-us/windows/wsl/file-permissions#wsl-metadata-on-windows-files][doc]].
    - Now we have =/C= and =/c/Users/= in =640= mode and directories
      under =/c= except =/c/Users= in =750=.
    - A final block is to replace capital =C= in =PATH= with =c= instead.
      This make the windows executable outside =/c/Users/= are callable
      in =WSL=. Recall that they are in mode =750=.

    The fianl effect is:
    - The files orinally created by Windows, will be seen in =640= or
      =750=, as described above.
    - Your newly created files via =WSL= will be seen as =644= if you use
      =ls -l= in =WSL=,since the default =umask= value is =0022=. (Try
      yourself. It may differ case by case). However, if you check the
      file on =cygwin=, you will find the extra =executable= bit is
      on. The file is in mode =755=.
    - This is pretty urgly. But we do not have solutoins.
    - Remeber to transfer your file via =git=, =scp= inside =WSL=. This will
      prevent the file permission to be overriden before they are sent
      to other devices.

*** =fstab= and =mount= tips
    <<fstab-short-discussions>>
    I referred to this [[https://help.ubuntu.com/community/Fstab][webpage]]. Let us say you want to mount a
    partition, you may want to try
    : sudo mount -t drvfs C: /mnt/c -o metadata
    This tells the system that the mounted partition is in format of
    =drvfs= file system. The mount option is =metadata=, specified by =-o=.
    The source point is =C:=, the c drive on Windows. The
    target/destination is =/mnt/c=. It corresponds to the setup in
    =/etc/fstab/= like:
    : C: /mnt/c drvfs metadata 0 0
    The syntax for =/etc/fstab= is:
    : [Device] [Mount Point] [File System Type] [Options] [Dump] [Pass]
    Please check the [[https://help.ubuntu.com/community/Fstab][webpage]] for further reference.
