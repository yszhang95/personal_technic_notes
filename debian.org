#+TITLE: Debian related stuffs
* Installation on virtual machine
** Installation
   - Install the latest =VirtualBox=.
   - Download the testing release of =Debian=. I am using =Debian 10 testing=
     (i.e. =Debian bullseye=) when I am writing this org file.
   - Install =Debian= following the instructions. I choose to install both
     =Gnome= and =KDE=.
** Configuration after installation
*** =sudo= privilege
    Use =adduser=. If you cannot find it, try =whereis adduser=.
    #+begin_src shell
    su
    adduser yousen sudo
    reboot
    #+end_src
    After executing the codes above, actions will take effects after
    re-logging in.
*** Desktop
    I install both =KDE= and =Gnome=. To switch, in the log-in session,
    when you are typing in the password, you can also see a button on
    the right-bottom corner. Click it and you will find several options.
    This button will show if you have installed =gdm3= and put the content
    =/path/to/gdm3= in =/etc/X11/default-display-manager=.

    Never confuse the system using different settings simultaneously if
    you are not an expert. Stick to one desktop environment.
*** Build tools
    Try src_sh[:exports code]{sudo apt install build-essential}
*** Guest additions
    After building essentials, run
    src_sh[:exports code]{sudo apt install
    linux-headers-$(buname -r) module-assistant}.

    Next, click the menu tab =Devices= of the =VirtualBox= window.
    Choose =Insert guest additions CD images...=. The package should be
    mounted. If not, run =mount /media/cdrom=.

    Then,
    #+begin_src shell
    cd /media/cdrom
    sudo sh VBoxLinuxAdditions.run
    sudo reboot
    #+end_src
*** Clipboard, dragging, shared folder between guest and host.
    Click =Devices= of the =VirtualBox= window after you install guest
    additions.

    To access the shared folder inside guest, users on guests are
    needed to be in the user group of =virtualbox=. I tried the
    command src_sh[:exports code]{cat /etc/group | grep -i vb} and it gives
    =vboxsf:x:998=. After running
    src_sh[:exports code]{sudo adduser yousen vboxsf} and rebooting, I
    can access the shared folder.
* Softwares
** =EMACS= and =VIM=
*** Installations
    #+begin_src shell
    sudo apt install emacs vim
    #+end_src
** =HepMC2=
*** Installations
    #+begin_src shell
    mkdir /path/to/temp && cd /path/to/temp
    git clone https://gitlab.cern.ch/hepmc/HepMC.git
    mkdir build && cd build
    mkdir -p /home/yousen/.local/HepMC
    cmake -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/HepMC \
    -Dmomentum=GEV \
    -Dlength=MM \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -Dbuild_docs:BOOL=OFF \
    ../HepMC
    # Set default units are MM and GEV, to be consistent with HepMC3
    make
    make install
    make test
    # not good, may contaminate the environment variable
    cat >> ~/.bashrc <<- _EOF_

    # HepMC2
    export HEPMC2=~/.local/HepMC2
    _EOF_
    #+end_src
    I run ~make test~ but it shows several tests fail. I am not sure
    why.  Docs are not generated. It may need ~texlive~ and
    ~doxygen~. I do not install them. Units can be =MEV= and =MM= and
    are required to be specified. =CMAKE_BUILD_TYPE= can be
    =Debug|Release|RelWithDebInfo|MinSizeRel=.

    To execute the examples, I tried some. Not every example work. The
    configurations of examples may be outdated.
    #+begin_src shell
    cp -r /home/yousen/.local/HepMC/share/HepMC/examples . && cd examples
    make
    #+end_src
    =gfortran= is required. And I modified the =GNUmakefile=. Replace
    the empty ~HepMC_libdir~ to ~${prefix}/lib~. The make process gives
    some warnings but it works. I do not understand the warnings yet.
** =HepMC3=
*** Installations
    #+begin_src shell
    mkdir -p ~/.local/HepMC3
    git clone https://gitlab.cern.ch/hepmc/HepMC3.git
    mkdir build && cd build
    cmake -DHEPMC3_ENABLE_ROOTIO:BOOL=OFF -DHEPMC3_ENABLE_TEST:BOOL=OFF  \
      -DHEPMC3_INSTALL_INTERFACES:BOOL=ON \
      -DHEPMC3_ENABLE_PYTHON:BOOL=ON \
      -DHEPMC3_PYTHON_VERSIONS=3.9 \
      -DHEPMC3_BUILD_STATIC_LIBS:BOOL=OFF -DHEPMC3_BUILD_DOCS:BOOL=OFF  \
      -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/HepMC3   \
      -DHEPMC3_Python_SITEARCH39=/home/yousen/.local/lib/python3.9/site-packages \
      ../HepMC3
    make
    make install
    cd ~/.local/bin
    ln -s ~/.local/HepMC3/bin/HepMC3-config
    # the following are useless, use HepMC3-config instead
    # may contaminate the environment variable
    cat >> ~/.bashrc <<-_EOF_

    # HEPMC3
    export HEPMC3=~/.local/HepMC3
    _EOF_
    #+end_src
** =Fastjet3=
*** Installations
    #+begin_src shell
    wget http://fastjet.fr/repo/fastjet-3.3.4.tar.gz
    tar zxvf fastjet-3.3.4.tar.gz
    cd fastjet-3.3.4/
    mkdir -p ~/.local/fastjet3
    ./configure --prefix=/home/yousen/.local/fasjet3
    make
    make check
    make install
    cd ~/.local/bin
    ln -s ~/.local/fastjet3/bin/fasjet-config . # soft link
    # it is not a good way to do the following. Use fastjet-config instead.
    # may contaminate the environment variable
    cat >> ~/.bashrc <<-_EOF_

    # FastJet
    export FASTJET=~/.local/fastjet3
    #+end_src
** ~FastJet Contrib~
*** Installations
    #+begin_src shell
    mkdir fjcontrib
    wget http://fastjet.hepforge.org/contrib/downloads/fjcontrib-1.045.tar.gz
    tar zxf fjcontrib-1.045.tar.gz
    cd fjcontrib-1.045
    ./configure \
    --fastjet-config=/home/yousen/.local/fastjet-3.3.4/bin/fastjet-config \
    --prefix=/home/yousen/.local/fastjet-3.3.4
    make
    make check # optional
    make install
    #+end_src

** =Pythia8=
*** Installations
    #+begin_src shell
    sudo apt intall rsync # needed for the step make install
    mkdir pythia8 && cd pythia8
    mkdir -p ~/.local/pythia8
    ./configure --prefix=/home/yousen/.local/pythia8/ \
    --with-hepmc2=/path/to/hepmc/rootdir \
    --with-hepmc3=/path/to/hepmc3/rootdir \
    --with-fastjet3=/path/to/fastjet3/rootdir \
    --cxx=g++
    # e.g. /home/yousen/.local/HepMC
    make
    make installl
    #+end_src
    =examples/main74.cc= cannot be compiled. I cannot read the messages.
    After installing ~EvtGen~. Do the following:
    #+begin_src shell
    ./configure --prefix=/home/yousen/.local/pythia8/ \
    --with-hepmc2=/path/to/hepmc/rootdir \
    --with-hepmc3=/path/to/hepmc3/rootdir \
    --with-fastjet3=/path/to/fastjet3/rootdir \
    --with-evtgen=/path/to/evtgen/rootdir \
    --cxx=g++
    #+end_src
    I do not check what will happen for ~EvtGen~ after doing above.
    Finally, create soft link.
    #+begin_src shell
    cd ~/.local/bin
    ln -s ~/.local/pythia8/bin/pythia8-config .
    #+end_src
** ~EvtGen~
*** Installations
    #+begin_src shell
    mkdir evtgen && cd evtgen
    git clone https://phab.hepforge.org/source/evtgen.git
    mkdir ~/.local/evtgen_R02_00_00
    mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/evtgen_R02_00_00/ \
    -DEVTGEN_HEPMC3=ON
    -DHEPMC3_ROOT_DIR=/home/yousen/.local/HEPMC_03_02_03/ \
    -DEVTGEN_PYTHIA=ON \
    -DPYTHIA8_ROOT_DIR=/home/yousen/.local/pythia8303/  ../evtgen/
    make
    make install
    echo "" >> ~/.bashrc
    echo "#pythia8" >> ~/.bashrc
    echo "export PYTHIA8=~/.local/pythia8303" >> ~/.bashrc # not good one
    echo "export PYTHIA8DATA=~/.local/pythia8303/share/Pythia8/xmldoc" >> ~/.bashrc # necessary one

    # the following are not good, may contaminate the environment variable
    cat >> ~/.bashrc <<- _EOF_

    # EvtGen
    export EVTGEN=~/.local/evtgen
    _EOF_
    #+end_src
** ~ROOT6~
*** Installations
    Required prerequisite,
    #+begin_src shell
    sudo apt install dpkg-dev cmake g++ gcc \
    binutils libx11-dev libxpm-dev libxft-dev \
    libxext-dev python python3 libssl-dev
    #+end_src
    Optional prerequisite,
    #+begin_src shell
    sudo apt-get install gfortran libpcre3-dev \
    xlibmesa-glu-dev libglew1.5-dev libftgl-dev libgfal2-dev \
    libmariadb-dev libmariadb-dev-compat libfftw3-dev libcfitsio-dev \
    graphviz-dev libavahi-compat-libdnssd-dev \
    libldap2-dev python-dev python3-dev libxml2-dev libkrb5-dev \
    libgsl-dev qtbase5-dev libqt5webview5-dev qtwebengine5-dev\
    krb5-user python3-numpy \
    libgif-dev libtiff-dev libfcgi-dev \
    libafterimage-dev
    #+end_src
    External libraries and binaries:
    #+begin_src shell
    sudo apt install gfal2 libgfal2-dev srm-ifce-dev \
    r-base r-base-dev r-cran-rinside r-cran-rcpp \
    postgresql libpostgresql postgresql-server-dev-13 \
    libopenblas64-pthread-dev dcap-dev \
    qtbase5-dev libqt5webview5-dev qtwebengine5-dev \
    libsqlite3-dev
    #+end_src
    I am not sure ~postgresql-server-dev-13~ is required.
    It seems ~Pythia6~, ~m~, ~Monalisa~, ~Alien~,
    ~Arrow~, ~VecGeom~ cannot be linked. I am not sure
    how to install these external packages.

    Build ~ROOT6~.
    #+begin_src shell
    wget https://root.cern/download/root_v6.22.06.source.tar.gz
    tar zxf root_v6.22.06.source.tar.gz
    mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/root6 \
    -DCMAKE_CXX_STANDARD=14 \
    -DPYTHIA8_DIR=/home/yousen/.local/pythia8 \
    -DPYTHIA8_INCLUDE_DIR=/home/yousen/.local/pythia8/include \
    -DPYTHIA8_LIBRARY=/home/yousen/.local/pythia8/lib/libpythia8.so \
    ../root-6.22.06
    make
    make install
    #+end_src
    ~VecGeom~ is not installed.

    After installing root, do not forget to append the root setup to
    ~.bashrc~. Use the following: src_sh[:exports code]{source
    ~/.local/root6/bin/thisroot.sh}.

*** External libraries
    I will take ~Pythia8~ as an example. Others may be similar. But I
    do not try.

    To help ~ROOT~ find ~libpythia8.so~, you may want to modify the
    environment variable ~LD_LIBRARY_PATH~. But it is really dirty.
    Instead you may want to use ~gSystem->Load("/path/to/lib")~ inside
    ~rootlogon.C~.

    If you want to compile the macro using ~ACLiC~
    with external ~Pythia8~ libraries inside root prompt, do the following:
    #+begin_src shell
    # Taking pythia 8 as an example.
    # asumming we are under tutorial/pythia
    root [0] gSystem->AddIncludePath("-I$(pythia8-config --includedir)")
    # To make the c++ options like
    # c++ -shared -L/path/to/pythia8/lib -lpythia8 you have to follow the
    # below and remeber AddLinkedLibs does not recognize
    # $(pythia8-config --libdir).
    # To get the string of output of above command,
    # try the following line,
    # auto out = gSystem->GetFromPipe("pythia8-config --libdir")
    root [1] gSystem->AddLinkedLibs("-lpythia8") # libpythia8.so
    root [2] gSystem->AddLinkedLibs("-L/path/to/pythia8/lib")
    # or swap the these two above
    # or alternatively
    # root [1] gSystem->AddLinkedLibs("-L/path/to/pythia8/lib -lpythia8")
    root [3] .L pythia8.C+
    root [4] pythia8()
    #+end_src


** ~cvmfs~
*** Installations
    #+begin_src shell
    git clone --recursive https://github.com/cvmfs/cvmfs.git
    mkdir build && cd build
    sudo apt install python2 python3 python-setuptools python3-setuptools \
    openssl libssl-dev uuid-dev fuse libfuse-dev libfuse3-dev \
    libcap-dev libpcap-dev autofs attr
    cmake ../
    make
    sudo sudomake install
    #+end_src
    Please read [[https://cvmfs.readthedocs.io/en/stable/cpt-quickstart.html][get-started]]. I cannot manage to run ~cvmfs~.
** =CMAKE=
*** Installation
    #+begin_src shell
    sudo apt install cmake
    #+end_src
*** Check =cmake= options
    See this [[https://stackoverflow.com/questions/16851084/how-to-list-all-cmake-build-options-and-their-default-values/53075317][link]].
    #+begin_src shell
    mkdir build
    cd build
    cmake ..
    cmake -LA | awk '{if(f)print} /-- Cache values/{f=1}'
    #+end_src
** =Python=
*** Installations
    #+begin_src shell
    sudo apt install python3
    #+end_src
*** Packages
    Try at first src_sh[:exports code]{apt search python3-{package-name}}.
    For instance, to install =numpy=. Do the following,
    #+begin_src shell
    apt search numpy
    apt search python3-numpy
    sudo apt install python3-numpy* # all related to numpy, not just numpy
    #+end_src
    If you cannot find the package, try =pip=. Taking =uproot= as an example,
    #+begin_src shell
    apt search python3-pip
    sudo apt install python3-pip
    pip3 install uproot --user # install package under ~/.local/lib/pythonxx
    #+end_src
** ~Kerberos~
*** Installations
    #+begin_src shell
    sudo apt install krb5-user
    #+end_src
** ~R Language~
*** Installations
    Read this [[https://cran.r-project.org/bin/linux/debian/][link]].
    #+begin_src shell
    apt-cache search "^r-.*" | sort
    sudo apt install r-base r-base-dev r-cran-rinside r-cran-rcpp
    #+end_src
** ~Qt5~
*** Installations
    #+begin_src shell
    sudo apt install qt*5
    # might be redundant
    sudo apt install qtbase5-dev libqt5webview5-dev qtwebengine5-dev \
    libqt5websockets5-dev libqt5websockets5 \
    libqt5webchannel5 libqt5webchannel5-dev \
    libqt5webkit5 libqt5webkit5-dev \
    libqt5webview5 libqt5webview5-dev
    #+end_src
