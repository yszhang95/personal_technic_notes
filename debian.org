#+TITLE: Debian related stuffs
* Installation on virtual machine
** Installation
   - Install the latest =VirtualBox=.
   - Download the testing release of =Debian=. I am using =Debian 10 testing=
     (i.e. =Debian bullseye=) when I am writing this org file.
   - Install =Debian= following the instructions. I choose to install both
     =Gnome= and =KDE=.
** Configuration after installation
*** =sudo= privilege
    Use =adduser=. If you cannot find it, try =whereis adduser=.
    #+begin_src shell
    su
    adduser yousen sudo
    reboot
    #+end_src
    After executing the codes above, actions will take effects after
    re-logging in.
*** Desktop
    I install both =KDE= and =Gnome=. To switch, in the log-in session,
    when you are typing in the password, you can also see a button on
    the right-bottom corner. Click it and you will find several options.
    This button will show if you have installed =gdm3= and put the content
    =/path/to/gdm3= in =/etc/X11/default-display-manager=.

    Never confuse the system using different settings simultaneously if
    you are not an expert. Stick to one desktop environment.
*** Build tools
    Try src_sh[:exports code]{sudo apt install build-essential}
*** Guest additions
    After building essentials, run
    src_sh[:exports code]{sudo apt install
    linux-headers-$(buname -r) module-assistant}.

    Next, click the menu tab =Devices= of the =VirtualBox= window.
    Choose =Insert guest additions CD images...=. The package should be
    mounted. If not, run =mount /media/cdrom=.

    Then,
    #+begin_src shell
    cd /media/cdrom
    sudo sh VBoxLinuxAdditions.run
    sudo reboot
    #+end_src
*** Clipboard, dragging, shared folder between guest and host.
    Click =Devices= of the =VirtualBox= window after you install guest
    additions.

    To access the shared folder inside guest, users on guests are
    needed to be in the user group of =virtualbox=. I tried the
    command src_sh[:exports code]{cat /etc/group | grep -i vb} and it gives
    =vboxsf:x:998=. After running
    src_sh[:exports code]{sudo adduser yousen vboxsf} and rebooting, I
    can access the shared folder.
* Softwares
** =EMACS= and =VIM=
*** Installations
    #+begin_src shell
    sudo apt install emacs vim
    #+end_src
** =HepMC2=
*** Installations
    #+begin_src shell
    mkdir /path/to/temp && cd /path/to/temp
    git clone https://gitlab.cern.ch/hepmc/HepMC.git
    mkdir build && cd build
    mkdir -p /home/yousen/.local/HepMC
    cmake -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/HepMC \
    -Dmomentum=GEV \
    -Dlength=MM \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -Dbuild_docs:BOOL=OFF \
    ../HepMC
    # Set default units are MM and GEV, to be consistent with HepMC3
    make
    make install
    make test
    #+end_src
    I run ~make test~ but it shows several tests fail. I am not sure
    why.  Docs are not generated. It may need ~texlive~ and
    ~doxygen~. I do not install them. Units can be =MEV= and =MM= and
    are required to be specified. =CMAKE_BUILD_TYPE= can be
    =Debug|Release|RelWithDebInfo|MinSizeRel=.

    To execute the examples, I tried some. Not every example work. The
    configurations of examples may be outdated.
    #+begin_src shell
    cp -r /home/yousen/.local/HepMC/share/HepMC/examples . && cd examples
    make
    #+end_src
    =gfortran= is required. And I modified the =GNUmakefile=. Replace
    the empty ~HepMC_libdir~ to ~${prefix}/lib~. The make process gives
    some warnings but it works. I do not understand the warnings yet.
** =HepMC3=
*** Installations
    #+begin_src shell
    mkdir -p ~/.local/HepMC3
    git clone https://gitlab.cern.ch/hepmc/HepMC3.git
    mkdir build && cd build
    cmake -DHEPMC3_ENABLE_ROOTIO:BOOL=OFF -DHEPMC3_ENABLE_TEST:BOOL=OFF  \
      -DHEPMC3_INSTALL_INTERFACES:BOOL=ON \
      -DHEPMC3_ENABLE_PYTHON:BOOL=ON \
      -DHEPMC3_PYTHON_VERSIONS=3.9 \
      -DHEPMC3_BUILD_STATIC_LIBS:BOOL=OFF -DHEPMC3_BUILD_DOCS:BOOL=OFF  \
      -DCMAKE_INSTALL_PREFIX=/home/yousen/.local/HepMC3   \
      -DHEPMC3_Python_SITEARCH39=/home/yousen/.local/lib/python3.9/site-packages \
      ../HepMC3
    make
    make install
    #+end_src
** =Fastjet3=
*** Installations
    #+begin_src shell
    wget http://fastjet.fr/repo/fastjet-3.3.4.tar.gz
    tar zxvf fastjet-3.3.4.tar.gz
    cd fastjet-3.3.4/
    mkdir -p ~/.local/fastjet3
    ./configure --prefix=/home/yousen/.local/fasjet3
    make
    make check
    make install
    #+end_src
** ~FastJet Contrib~
*** Installations
    #+begin_src shell
    mkdir fjcontrib
    wget http://fastjet.hepforge.org/contrib/downloads/fjcontrib-1.045.tar.gz
    tar zxf fjcontrib-1.045.tar.gz
    cd fjcontrib-1.045
    ./configure \
    --fastjet-config=/home/yousen/.local/fastjet-3.3.4/bin/fastjet-config \
    --prefix=/home/yousen/.local/fastjet-3.3.4
    make
    make check # optional
    make install
    #+end_src

** =Pythia8=
*** Installations
    #+begin_src shell
    sudo apt intall rsync # needed for the step make install
    mkdir pythia8 && cd pythia8
    mkdir -p ~/.local/pythia8
    ./configure --prefix=/home/yousen/.local/pythia8/ \
    --with-hepmc2=/path/to/hepmc/rootdir \
    --with-hepmc3=/path/to/hepmc3/rootdir \
    --with-fastjet3=/path/to/fastjet3/rootdir \
    --cxx=g++
    # e.g. /home/yousen/.local/HepMC
    make
    make installl
    #+end_src
    =examples/main74.cc= cannot be compiled. I cannot read the messages.
** =CMAKE=
*** Installation
    #+begin_src shell
    sudo apt install cmake
    #+end_src
*** Check =cmake= options
    See this [[https://stackoverflow.com/questions/16851084/how-to-list-all-cmake-build-options-and-their-default-values/53075317][link]].
    #+begin_src shell
    mkdir build
    cd build
    cmake ..
    cmake -LA | awk '{if(f)print} /-- Cache values/{f=1}'
    #+end_src
** =Python=
*** Installations
    #+begin_src shell
    sudo apt install python3
    #+end_src
*** Packages
    Try at first src_sh[:exports code]{apt search python3-{package-name}}.
    For instance, to install =numpy=. Do the following,
    #+begin_src shell
    apt search numpy
    apt search python3-numpy
    sudo apt install python3-numpy* # all related to numpy, not just numpy
    #+end_src
    If you cannot find the package, try =pip=. Taking =uproot= as an example,
    #+begin_src shell
    apt search python3-pip
    sudo apt install python3-pip
    pip3 install uproot --user # install package under ~/.local/lib/pythonxx
    #+end_src
