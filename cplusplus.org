#+TITLE: Tips for C++
* Tips for =C++=
** How to trim =std::stirng=
trim functions are copied from [[https://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring][stackoverflow]].
#+begin_src c++
  #include <algorithm>
  #include <cctype>
  #include <locale>
  // trim from start (in place)
  static inline void ltrim(std::string &s) {
    s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](unsigned char ch) {
      return !std::isspace(ch);
    }));
  }

  // trim from end (in place)
  static inline void rtrim(std::string &s) {
    s.erase(std::find_if(s.rbegin(), s.rend(), [](unsigned char ch) {
      return !std::isspace(ch);
    }).base(), s.end());
  }

  // trim from both ends (in place)
  static inline void trim(std::string &s) {
    ltrim(s);
    rtrim(s);
  }

  // trim from start (copying)
  static inline std::string ltrim_copy(std::string s) {
    ltrim(s);
    return s;
  }

  // trim from end (copying)
  static inline std::string rtrim_copy(std::string s) {
    rtrim(s);
    return s;
  }

  // trim from both ends (copying)
  static inline std::string trim_copy(std::string s) {
    trim(s);
    return s;
  }
#+end_src

** Better way to create an array with the variable size
   I refer to this [[https://stackoverflow.com/a/21377382][answer]] and this [[https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique][link]]. An example is
   : std::unique_ptr<unsigned char[]> testData(new unsigned char[16000]());
   : auto testData = std::make_unique<unsigned char[]>(16000);
   Note that =make_unique= is available from =C++14=.

** It is preferred to use =make_unique=
   =make_unique= is exception safe:
   : foo(make_unique<T>(), make_unique<U>()); // exception safe
   : foo(unique_ptr<T>(new T()), unique_ptr<U>(new U())); // unsafe*
   In the second line, the unspecified-evaluation-order may trigger
   memory leak. I refer to [[https://stackoverflow.com/a/37514601][this answer]], [[https://stackoverflow.com/a/22571331][this answer]], and the
   [[https://isocpp.org/blog/2019/06/quick-q-differences-between-stdmake-unique-and-stdunique-ptr-with-new][blog]]. They own the credits.

** Do not abuse =std::endl=
   Use '\n' if you really want a new line. Please consult this [[https://kuhllib.com/2012/01/14/stop-excessive-use-of-stdendl/][post]].

** Replace a character in =std::stirng=
   I checked this [[https://stackoverflow.com/a/2896627][answer]]. It only works if you want replace a
   character with a character.

   An example to replace a character with a
   desired one:
   #+begin_src c++
     std::string s = "example string";
     std::replace( s.begin(), s.end(), 'x', 'y'); // replace all 'x' to 'y'
   #+end_src

   You may want to replace a sub-string with another sub-string like:
   #+begin_src c++
     std::string s = "pT1.0to2.0_yAbsMax2.4";
     for (auto pos = s.find(".0"); pos!=std::string::npos;
          pos = s.find(".0", pos)) { // find ".0" from pos (pos is position index)
       s.replace(pos, 2, ""); // replace following 2 character starting from pos
      }
   #+end_src

** Format the =std::string=
   In principle, you could make use of =std::sprintf= and =std::snprintf=
   before =C++20=. The =snprintf= starts from =C++11=. You would like to
   refer to [[https://en.cppreference.com/w/cpp/io/c/fprintf][the reference]].

   It is also helpful to warp them up. I copied the code from the
   [[https://stackoverflow.com/a/26221725][answer]]. It looks like:
   #+begin_src c++
     #include <memory>
     #include <string>
     #include <stdexcept>

     template<typename ... Args>
     std::string string_format( const std::string& format, Args ... args )
     {
         int size_s = std::snprintf( nullptr, 0, format.c_str(), args ... ) + 1; // Extra space for '\0'
         if( size_s <= 0 ){ throw std::runtime_error( "Error during formatting." ); }
         auto size = static_cast<size_t>( size_s );
         auto buf = std::make_unique<char[]>( size );
         std::snprintf( buf.get(), size, format.c_str(), args ... );
         return std::string( buf.get(), buf.get() + size - 1 ); // We don't want the '\0' inside
     }
   #+end_src
   It make use of the variadic template in the declaration (see
   [[*Parameter pack and variadic template][Parameter pack and variadic template]]). And it make use of a
   variable size of array instead of fixed size arrays. This is
   because =snprintf= have the following properties:
   #+begin_quote
   If the resulting string gets truncated due to buf_size limit,
   function returns the total number of characters (not including the
   terminating null-byte) which would have been written, if the limit
   was not imposed.
   #+end_quote

   A =C++20= solution is [[https://en.cppreference.com/w/cpp/utility/format/format][=std::format=]].

** Parameter pack and variadic template
   You could refer to the [[https://stackoverflow.com/a/19923558][answer]] and the [[https://en.cppreference.com/w/cpp/language/parameter_pack][link]]. I do not understand the
   details very much. An example is in [[*Format the =std::string=][Format the =std::string=]].

** Which part of the constructor should be in header/source code
   I quote the words from the [[https://en.cppreference.com/w/cpp/language/constructor][reference]].
   #+begin_quote
   The body of a function definition of any constructor, before the
   opening brace of the compound statement, may include the /member
   initializer list/, whose syntax is the colon character =:=, followed
   by the /comma-separated list/ of one or more /member-initializers/.
   #+end_quote

   I also thank this short [[https://stackoverflow.com/a/15335287/12357991][answer]]. Thus the member initializer list
   need to be included in /source code/ since it is part of the function
   definition.

   The default value of arguments should be put in header. I guess the
   the default arguments (optional arguments?) are parts of function
   declaration. I did not dived into the [[https://en.cppreference.com/w/cpp/language/function][reference]], the [[https://stackoverflow.com/questions/9260246/should-c-function-default-argument-values-be-specified-in-headers-or-cpp-sour][question]], and
   the [[https://stackoverflow.com/questions/14902129/default-parameters-in-h-and-cpp-files][question]].


** Infinity
   Float number can be assigned as infinity. Please refer to the
   [[https://en.cppreference.com/w/cpp/types/numeric_limits/infinity][reference]]. Note that not each type has inifinity.

   I made test under root-v6.24.06 shipped with Fedora-35.

   In root prompt, I tried
   : root [] std::numeric_limits<double>::infinity() > 3E1000
   : ROOT_prompt_3:1:43: warning: magnitude of floating-point constant too large for type 'double'; maximum is 1.7976931348623157E+308 [-Wliteral-range] std::numeric_limits<double>::infinity() > 3E1000
   : (bool) false
   : root [] std::numeric_limits<double>::infinity()
   : (double) inf
   : root [] std::numeric_limits<float>::infinity()
   : (double) inff
   : root [] std::numeric_limits<long double>::infinity()
   : (double) infL
   : root [] std::numeric_limits<int>::infinity()
   : (double) 0

   BTW, you could also try =std::stof= and etc.. In root prompt
   : root [] stof("inf")
   : (float) inff

   But you cannot do similar for =std::stoi= and etc..

   Please check the [[https://en.cppreference.com/w/cpp/string/basic_string/stol][reference]] and the [[https://en.cppreference.com/w/cpp/string/basic_string/stof][reference]].

   Positive infinity is always larger than all values except itself and =NaN=.
   I copied the [[https://stackoverflow.com/a/52817548][answer]] here:
   According to [[https://www.gnu.org/software/libc/manual/html_node/Infinity-and-NaN.html][gnu-libc]]:
   #+begin_quote
   In comparison operations, positive infinity is larger than all
   values except itself and NaN
   #+end_quote

   To check the infinity, use =std::isinf=. Check this [[https://en.cppreference.com/w/cpp/numeric/math/isinf][link]]. It mentions
   an example, =exp(800)= is considered as =true=.

** Convert characters in a string
   Please check the library =cctype=. The link is [[https://en.cppreference.com/w/cpp/header/cctype][here]].

   I take the function =std::tolower= as an example.

   You would like to use =std::transform=. I copy this example from the
   [[https://en.cppreference.com/w/cpp/string/byte/tolower][link]].
   #+begin_src c++
     std::string str_tolower(std::string s) {
       std::transform(s.begin(), s.end(), s.begin(),
                      // static_cast<int(*)(int)>(std::tolower)         // wrong
                      // [](int c){ return std::tolower(c); }           // wrong
                      // [](char c){ return std::tolower(c); }          // wrong
                      [](unsigned char c){ return std::tolower(c); } // correct
                      );
       return s;
     }
   #+end_src
   You need to always convert the type of characters to =unsigned char=
   at first, otherwise the behavior is undefined, as described in the
   =Notes= in the [[https://en.cppreference.com/w/cpp/string/byte/tolower][link]]. I quote the descriptions here:
   #+begin_quote
   Like all other functions from =<cctype>=, the behavior of
   =std::tolower= is /undefined/ if the argument's value is neither
   representable as =unsigned char= nor equal to =EOF=. To use these
   functions safely with plain =char= (or =signed char=), the argument
   should first be converted to =unsigned char=. Similarly, they should
   /not/ be directly used with standard algorithms when the iterator's
   value type is =char= or =signed char=. Instead, convert the value to
   =unsigned char= first.
   #+end_quote

** std::transform
   This function have several versions. Please check the [[https://en.cppreference.com/w/cpp/algorithm/transform][reference]].

   I think there are two main categories:
   - unary operations, first
   - binary operations

   I think I only use two versions.
   - The arguments in order are first, last iterator of input range, first
     iterator of the destination , unary operation.
   - The arguments in order are first, last iteartor of input range,
     first iterator of the second input range, first of the output
     iterator, binary operation.

   However, I do not know what will happen if the second input range
   or the destination have smaller capacities than the first input
   range. Is it /undefined/?
