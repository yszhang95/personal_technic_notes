#+STARTUP: OVERVIEW
* Basic
** Files
*** Find a file
    =C-x C-f=   Find a file
*** Save a file
    =C-x C-s=   Save the file
*** to end the Emacs session
    type =C-x C-c=.
** BUFFERS
*** List, switch and save buffers
    - =C-x C-b= list buffers
    - =C-x b= switch to a buffer
    - =C-x s= save some buffers
    - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Kill-Buffer.html][Kill-Buffer]]
      * =C-x k buffer <RET>=    Kill buffer buffer (kill-buffer).
      * =M-x kill-some-buffers= Offer to kill each buffer, one by one.
      * =M-x kill-matching-buffers= Offer to kill all buffers
	matching a regular expression.

** Commands
*** Repeat counts
    - =M-8 other commands=
    - =C-u 8 other commands=
      - eg. =M-8 C-f=
      - exceptions, =C-u 8 C-v= only scrolls by 8 lines, not screens

*** To quit a partially entered command
    type =C-g=

*** Disabled commands
    If you really want to try the command, type <SPC> (the Space bar) in
    answer to the question.  Normally, if you do not want to execute the
    disabled command, answer the question with "n".

*** Extending the command set
    - =C-x=     Character eXtend.  Followed by one character.
      * =C-x C-f=         Find file
      * =C-x C-s=         Save file
      * =C-x s=           Save some buffers
      * =C-x C-b=         List buffers
      * =C-x b=           Switch buffer
      * =C-x C-c=         Quit Emacs
      * =C-x 1=           Delete all but one window
      * =C-x u=           Undo
    - =M-x=     Named command eXtend.  Followed by a long name.
      * =M-x replace-string=

*** C-z
    =C-z= is the command to exit Emacs *temporarily*--so that you can go
    back to the same Emacs session afterward.  When Emacs is running on a
    text terminal, C-z "suspends" Emacs; that is, it returns to the shell
    but does not destroy the Emacs job.  In the most common shells, you
    can resume Emacs with the "fg" command or with "%emacs".

*** Set margin size
    =C-x f=

*** Re-fill inside the middle of a paragraph
    =M-q=

*** Searching
    =C-s=, forward search, =C-r=, reverse search

*** =<ESC> <ESC> <ESC>=
    That is an all-purpose "get out" command.  You can also use it for
    eliminating extra windows, and getting out of the minibuffer.

** Windows
   =C-x 1=   One window (i.e., kill all other windows)

** Movements
*** View next (previous) screen
    =C-v=, =M-v=
*** =C-l=
    Clear screen and redisplay all the text,
    moving the text around the cursor
    to the center of the screen.
    (That's CONTROL-L, not CONTROL-1.)
*** =C-b=, =C-p=, =C-f=, =C-n=, =M-b=, =M-f=
    Backward, previous line, forward, next line, no M-p nor M-n
*** C-a, C-e, M-a, M-e
    beginning or end of a line / sentence.
*** M-<, M->
    =M-<= (META Less-than),
    which moves to the beginning of the whole text, and =M->= (META
    Greater-than), which moves to the end of the whole text.
    On most terminals, the "<" is above the comma, so you must use the
    shift key to type it.
** Edit
*** <DEL>, "Backspace", C-d, M-d, M-<DEL>, c-k, M-k
    - =<DEL>=        Delete the character just before the cursor
    - =C-d=          Delete the next character after the cursor

    - =M-<DEL>=      Kill the word immediately before the cursor
    - =M-d=          Kill the next word after the cursor

    - =C-k=          Kill from the cursor position to end of line
    - =M-k=          Kill to the end of the current sentence

*** Cut, copy and paste
    [[https://www.emacswiki.org/emacs/CopyAndPaste][CopyAndPaste]]
    1. Mark the beginning, =C-<SPC>=.
    2. Move to the end.
    3. =C-w= (kill-region) or =M-w= (Kill-ring-save)
    4. Move to the place you want to paste
    5. =C-y= (yank), =M-y= yank more previous kills.

*** Undo  =C-/=, =C-_=, =C-x u=
*** Completion
    Can be found in the manual Completion. It helps enter arguments.

*** Dired
    Dired makes an Emacs buffer containing a listing of a directory, and
    optionally some of its subdirectories as well. The Dired buffer is
    normally read-only, and inserting text in it is not allowed.

**** Enter
     C-x d

** HELP
   =C-h ?= or =M-x help= or =<F1>=
   =C-h c= or =C-h k= and a command character or sequence
   =C-h f= Describe a function.  You type in the name of the function.
   =C-h v= displays the documentation of variables
   =C-h i=        Read included Manuals (a.k.a. Info).
   =C-h a=
   =C-h r= read manuals

** Terms
*** electric
    The <Return> key is special, in that pressing it may do more than
    just insert a Newline character.  Depending on the surrounding text,
    it may insert whitespace after the Newline character, so that when
    you start typing on the newly created line, the text lines up with
    that on the previous line.  We call this behavior (where pressing a
    key does more than simply inserting the relevant character) "electric".

*** "continued" line
    If you're using a
    graphical display, little curved arrows appear in the narrow spaces on
    each side of the text area (the left and right "fringes"), to indicate
    where a line has been continued.  If you're using a text terminal, the
    continued line is indicated by a backslash ('\') on the rightmost
    screen column.

*** kill, delete and yank
    The difference between "killing" and "deleting" is that "killed" text
    can be reinserted (at any position), whereas "deleted" things cannot
    be reinserted in this way (you can, however, undo a deletion--see
    below).  Reinsertion of killed text is called "yanking".

*** AUTO SAVE and recover
    For example, if your file is named "hello.c", its auto save
    file's name is "#hello.c#".
    You can recover your auto-saved editing by
    finding the file normally (the file you were editing, *not* the auto
    save file) and then typing =M-x recover-this-file <Return>=.
*** ECHO AREA
    If Emacs sees that you are typing multicharacter commands slowly, it
    shows them to you at the bottom of the screen in an area called the
    "echo area".  The echo area contains the bottom line of the screen.
*** MODE LINE
    e.g
    =-:**-  TUTORIAL       63% L749    (Fundamental)=
*** Major modes
    e.g. fundamental
    =C-h m=, To view documentation on your current major mode.
    =M-x modes you want=
*** Minor modes
    e.g. auto fill,
    =M-x auto-fill-mode=
*** Frames
    - =C-x 2= which splits the screen into two windows
    - =C-M-v= or =<ESC> C-v=, scroll down the other window
    - =C-x o=  to switch between the windows
    - =C-x 1= kill others except the one I am in
    - =C-x 3= splits the screen into two, vertically
    - Type =C-x 4 C-f= followed by the name of one of your files.
      End with =<Return>=.  See the specified file appear in the bottom
      window.  The cursor goes there, too.
*** RECURSIVE EDITING LEVELS
    This is indicated by square brackets in the mode line,
    surrounding the parentheses around the major mode name.  For
    example, you might see [(Fundamental)] instead of (Fundamental).
    To get out of the recursive editing level, type =<ESC> <ESC> <ESC>=.
    You cannot use =C-g= to get out of a recursive editing level.  This is
    because =C-g= is used for canceling commands and arguments *WITHIN* the
    recursive editing level.

*** Dired

* Emacs client
  [[https://www.emacswiki.org/emacs/EmacsClient][EmacsClient]]

** unix-like
   In unix-like terminal, you can try
   #+NAME: EmacsClient-in-terminal
   #+BEGIN_SRC sh
   $emacs --daemon
   $emacsclient -c file # open in a window
   #emacsclient -t file # open in terminal
   #+END_SRC

** windows
   In windows, I did not figure out how to open cygwin-built emacs via --daemon
   I can successfully open emacs via --daemon with windows-built emacs.
   Firstly create a shortcut with
   src_sh[:exports code]{c:\path\to\emacs\bin\emacsclientw.exe -c -n -a runemacs.exe}
   #+NAME: EmacsClient-in-windows
   #+begin_src sh
   $cd /path/to/emacs
   $runemacs --daemon
   #+end_src
   Double click the shortcut.
** kill
   #+begin_src sh
$emacsclient -e '(kill-emacs)' # or try below
$emacsclient -e '(client-save-kill-emacs)'
   #+end_src

* =ivy= and =swiper=
  [[https://oremacs.com/swiper/][IvyUserManual]]
** Started
   =M-x ivy-mode=
** Key bindings
*** Global key bindings
    =C-c g= is overloaed by prelude as prelude-google
    =C-c m= is undefined by prelude-emacs
    A lot of global key bindings are overloaded or undefined by prelude.
    Check later.
*** Minibuffer key bindings
* Org mode
  Please consult this [[https://orgmode.org/orgguide.pdf][link]] (maybe outdated) and [[https://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html][its translation]].
** Deadline
   =C-c C-d=
** Outline and document structure
   ~org-cycle~ is bound to =TAB=.
*** Structure editing
**** Keyboard with arrows
     - =M-RET= :: Insert a new header with the same level as current.
       On cygwin, src_org[:exports code]{C-<RET>}, otherwise,
       =M-<RET>=.
     - =M-S-RET= :: Insert a new =TODO= entry with same level as current
       heading.
     - =TAB= in new empty entry :: In a new entry with no text yet,
       =TAB= cycles through reasonable levels.
     - =M-LEFT/RIGHT= :: Promote or demote current heading by one level.
     - =M-S-LEFT/RIGHT= :: Promote or demote the current heading with
       its subtree by one level.
     - =M-UP/DOWN= :: Swap the current heading and its subtree with
       previous/next heading of same level.
     - =M-S-UP/DOWN= :: Move the current heading upward or downward
       without moving its subtree, i.e., the headings are swapped
       without considering their levels.
     - =C-c C-w= :: Refile the entry or region to a different location.
     - =C-c n s/w= :: Narrow the buffer to the current subtree and widen
       it again.

**** Alternative keys for arrows
     [[https://orgmode.org/manual/TTY-Keys.html][Using Org on a TTY]]
*** Visibility of cycling
    - =TAB= :: FOLDED->CHILDREN->SUBTREE cycle
    - =S-TAB= or =C-u TAB= :: OVERVIEW->CONTENTS->SHOWALL cycle
    - =C-u C-u C-u TAB= :: Show all, including drawers.

    When =EMACS= first visits an =Org= file, the global state is set to
    =OVERVIEW=. It can be configured via =org-startup-folded= or via the
    keyword =startup=:
    #+begin_src org
    #+STARTUP: content
    #+end_src
*** Motion
    - =C-c C-n= :: next heading
    - =C-c C-p= :: previous heading
    - =C-c C-f= :: next heading same level
    - =C-c C-b= :: previous heading same level
    - =C-c C-u= :: backward to higher level heading
*** Sparse tree
    Sparse tree shows selected information in an outline tree and hide
    others.
    - =C-c /= :: This prompts for an extra key to select a sparse-tree
      creating command.
    - =C-c / r= :: Occur. Prompts for a =regexp= and shows a sparse with all
      matches. Each match is also highlighted; the highlights disappear
      by pressing =C-c C-c=.

*** Plain lists
    [[https://orgmode.org/manual/Plain-Lists.html][Plain-Lists]]
    - Unordered, start with '-', '+' or '*'
    - Ordered, start with '1.' or '1)' or '[@20]'. Alphabets are
      allowed, see more on the link.
    - Description, used like
      src_org[:exports code]{- Elijah Wood :: He plays Frodo}.
    Items belonging to the same list must have the same indentation on the
    first line. An item ends before the next line that is indented like its
    bullet/number, or less. A list ends when all items are closed, or before
    two blank lines.

    The following commands act on items when point is in the first line of
    an item (the line with the bullet number).
    - =TAB= :: Items can be folded just like headline levels.
    - =M-RET= :: Insert a new item at current level. With a prefix argument,
      force a new heading.
    - =M-S-RET= ::  Insert a new item with a checkbox.
    - =M-S-UP/DOWN= :: Move the item including subitems up/down.
    - =M-LEFT/RIGHT= :: Decrease/increase the indentation of an item, leaving
      children alone.
    - =M-S-LEFT/RIGHT= :: Decrease/increase the indentation of the item,
      including subitems.
    - =C-c C-c= :: If there is a checkbox in the item line, toggle the state
      of the checkbox. Also verify bullets and indentation consistency in the
      whole list.
    - =C-c -= :: Cycle the entire list level through the different
      itemize/enumerate bullets ('-','+','*','1.','1)').

** Table
   An example:
   #+begin_src org
   | Name  | Phone | Age |
   |-------+-------+-----|
   | Peter |  1234 |  17 |
   | Anna  |  4321 |  25 |
   #+end_src
   A table is re-aligned once you press =TAB=, =RET= or =C-c C-c= inside
   the table.

   Two quick ways to insert a new table. The first is
   #+begin_src org
   | Name  | Phone | Age |
   |-
   #+end_src
   and then type =TAB=. The second is
   #+begin_src org
   | Name  | Phone | Age |
   #+end_src
   and then type =C-c RET=.

*** Creation and conversion
    - =C-c |= :: Convert the active region to table. =TAB= and =comma= would
      serve as delimiters.

*** Re-aligning and field motion
    - =C-c C-c= :: Re-align the table without moving point.
    - =TAB= :: Re-align the table and move to the next field. Creates a
      new row if necessary.
    - =S-TAB= :: Re-align and move to the previous field.
    - =RET= :: Re-align the table and move down to the next row. Creates
      a new row if necessary.
    - =S-UP/DOWN/LEFT/RIGHT= :: Move a cell up/down/left/right by swapping
      with adjacent cell.
    - =M-LEFT/RIGHT= :: Move the current column left/right.
    - =M-S-LEFT= :: Kill the current column.
    - =M-S-RIGHT= :: Insert a new column to the left of point position.
    - =M-UP,M-DOWN= :: Move the current row up/down.
    - =M-S-UP= :: Kill the current row or horizontal line.
    - =M-S-DOWN= :: Insert a new row above the current row. With a prefix
      argument, the line is created below the current one.
    - =C-c -= :: Insert a horizontal line below current row. With a prefix
      argument, the line is created above the current line.
    - =C-c RET= :: Insert a horizontal line below current row, and move the
      point into the row below that line.
    - =C-c ^= :: Sort the table lines in the region.

** Hyperlinks
*** Link
    =C-c C-l= or =[[link][description]]= or =[link]=. To edit an existing link,
    put the point upon it and type =C-c C-l=.
    
**** Handling links
     Please also see this [[https://orgmode.org/manual/Handling-Links.html][link]].

     =org-store-link= will store a link to the current location. For
     example, put the =point= under =(provide 'init-org)= in
     =~/.emacs.d/lisp/init-org.el=. Run this command, you will find
     the following message.
     #+begin_example
     Stored: file:~/.emacs.d/lisp/init-org.el::(provide 'init-org)
     #+end_example

     - =C-c C-l= :: Insert a link. This prompts for a link to be
       inserted into the buffer. You can just type a link, or use
       history keys =UP= (or =M-p=) and =DOWN= (or =M-n=) to acess
       stored links. You will be prompted for the description part of
       the link.
     - =C-c C-l= (with point on existing link) :: When point is on an
       existing link, =C-c C-l= allows you to edit the link and description
       parts of the link.
     - =C-c C-o= :: Open link at point.
     - =C-c &= :: Jump back to a recorded position. A position is recorded
       by the commands following internal links, and by =C-c %=. Using this
       command several times in direct succession moves through a ring of
       previously recorded positions.

**** Internal links
     If the link is not URL-like, it is considered as an internal link.
     Two popular styles:
     - =[[#my-custom-id]]= :: Link the entry with the ~CUSTOM_ID~ property
       ~my-custom-id~.
     - =[[My Target]]= or =[[My Target][Find my target]]= :: Lead to a text
       search in the current file for the corresponding target, which looks
       like ~<<My Target>>~.

**** External links
     Please check this [[https://orgmode.org/manual/External-Links.html][link]].

     External links are URL-like locator. They start with a short
     identifying string followed by a colon. There can be no space
     after the colon. Here are some examples:
| ~http://www.astro.uva.nl/=dominik~        | on the web                       |
| ~file:/home/dominik/images/jupiter.jpg~   | file (absolute path)             |
| ~/home/dominik/images/jupiter.jpg~        | same as above                    |
| ~file:papers/last.pdf~                    | file (relative path)             |
| ~./papers/last.pdf~                       | same as above                    |
| ~file:projects.org~                       | another Org file                 |
| ~docview:papers/last.pdf::NNN~            | open in DocView mode at page NNN |
| ~id:B7423F4D-2E8A-471B-8810-C40F074717E9~ | link to heading by ID            |
| ~news:comp.emacs~                         | Usenet link                      |
| ~mailto:adent@galaxy.net~                 | mail link                        |
| ~mhe:folder#id~                           | MH-E message link                |
| ~rmail:folder#id~                         | Rmail message link               |
| ~gnus:group#id~                           | Gnus article link                |
| ~bbdb:R.*Stallman~                        | BBDB link (with regexp)          |
| ~irc:/irc.com/#emacs/bob~                 | IRC link                         |
| ~info:org#Hyperlinks~                     | Info node link                   |

** ~TODO~ items
*** Basic functionality
    Here is an example: ~*** TODO Write letter to Sam Fortune~.
    Other useful commands are:
    - =C-c C-t= :: Rotate the ~TODO~ state of the current item among
      -> (unmarked) -> TODO -> DONE ->; The same rotation can also be
      done "remotely" from the agenda buffer with the ~t~ command key.
    - =S-RIGHT/LEFT= :: Select the following/preceding ~TODO~ state,
      similar to cycling.
    - =C-c / t= :: View ~TODO~ items in a /sparse tree/. Folds the entire
      buffer, but shows all ~TODO~ items -- with not-DONE state -- and the 
      headings hierarchy above them.
    - =M-x org-agenda t= :: Show the global ~TODO~ list. Collects the
      ~TODO~ items (with not-DONE states) from all agenda files into a
      single buffer.
    - =S-M-RET= :: Insert a new ~TODO~ entry below the current one.

    Changing a ~TODO~ state can also trigger tag changes. See the docstring
    of the option ~org-todo-state-tags-triggers~ for details.
*** Multi-state workflow
    You can use ~TODO~ keywords to indicate @emph{sequential} working
    progress states:
    #+begin_src org
    (setq org-todo-keywords
          '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
    #+end_src
    The vertical bar seperates the ~TODO~ keywords (/states/
    that /need action/) from the ~DONE~ states (which need
    /no further action/). If you do not provide the seperator bar, the last
    state is used as the ~DONE~ state. With this setup, the command
    ~C-c C-t~ cycles an entry from ~TODO~ to ~FEEDBACK~, then to =VERIFY=,
    and finally to ~DONE~ and ~DELEGATED~.

    Sometimes you may want to use different sets of ~TODO~ keywords in
    parallel. For example, you may want to have the basic ~TODO~ / ~DONE~,
    but also a workflow for bug fixing. Your setup would then look like
    this:
    #+begin_src org
    (setq org-todo-keywords
          '((sequence "TODO(t)" "|" "DONE(d)")
            (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
	    (sequence "|" "CANCELED(c)")))
    #+end_src
    The keywords should all be different, this helps Org mode to keep track
    of which subsequence should be used for a given entry. The example also
    shows how to define keys for fast access of a particular state, by adding
    a letter in parethesis after each keyword -- you will be prompted for
    the key after ~C-c C-t~.

    To define =TODO= keywords that are valid only in a single file, use
    the following text anywhere in the file.
    #+begin_src org
    #+TODO: TODO(t) | DONE(d)
    #+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED (f)
    #+TODO: | CANCELED(c)
    #+end_src
    After changing one of these lines, use =C-c C-c= with the cursor still
    in the line to make the changes known to Org mode.
*** Progress logging
    To record a timestamp and a note when changing a ~TODO~ state, call
    the command ~org-todo~ with a prefix argument.
    - =C-u C-c C-t= :: Prompt for a note and record the time of
      the ~TODO~ state change.
**** Closing items
     =(setq org-log-done 'time)= will help you record the time when an
     item is closed.
    
     =(setq org-log-done 'note)= will prompt for a note to you.

     Or you can use in-buffer setting: =#+STARTUP: logdone= 
     ~#+STARTUP: logenotedone~.
**** Tracking ~TODO~ state changes
     After taking notes when you close ~TODO~ items, you want to get
     the notes out of the way into a drawer. Customize the variable
     ~org-log-into-drawer~ to get the behavior.

     For state logging, Org mode expects configurations on a per-keyword
     basis. This is achieved by adding special markers ~!~ (for a
     timestamp) and ~@~ (for a note) in parentheses after each keyword.
     For example:
     #+begin_src org
     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
     #+end_src
*** Priorities
    A headline with ~priority cookie~ will look like:
    #+begin_src org
    *** TODO [#A] Write letter to Sam Fortune
    #+end_src
    Priorities are ordered from A to C. A is the highest and B is the default
    if none is given.
    - =C-c ,= Set the priority of the current headline.
    - =S-UP/DOWN=, Increase/decrease the priority of the current headline.
*** Breaking tasks down into subtasks
    Append =[/]= or =[%]= to the ~TODO~ item will enable this feature. After
    typing =C-c C-c= when the point under =[]=, you will have the cookie updated.
    An example shown here.
    #+begin_src org
    * Organize Party [%]
    ** TODO Call people [/]
    *** TODO Peter
    *** DONE Sarah
    ** TODO Buy food
    ** DONE Talk to neighbor
    #+end_src

   After =C-c C-c=, it will become:
   #+begin_src org
   * Organize Party [33%]
   ** TODO Call people [1/2]
   *** TODO Peter
   *** DONE Sarah
   ** TODO Buy food
   ** DONE Talk to neighbor
   #+end_src

*** Checkboxes
    Checkboxes are used in plain lists. They help you split a ~TODO~ item into
    several steps. They are not included in the global ~TODO~ list.
    Here is an example:
    #+begin_src org
    * TODO Organize party [/]
      - [ ] call people [/]
        - [ ] Peter
	- [ ] Sarah
      - [ ] order food
    #+end_src
    After typing =C-c C-c= when point under cookies,
    #+begin_src org
    * TODO Organize party [1/2]
      - [-] call people [1/2]
        - [ ] Peter
	- [X] Sarah
      - [X] order food
    #+end_src

    User commands are:
    - =C-c C-c= :: Toggle checkbox status or -- with prefix argument -- checkbox
      presence at point.
    - =M-S-RET= :: Insert a new item with a checkbox when the point is already
      in a plain list item.

** Code blocks
   [[https://orgmode.org/manual/Structure-of-Code-Blocks.html][CodeBlocks]],
*** Inline
    you can also use ~~ and == for inline codes.
*** Structure templates
    [[https://orgmode.org/manual/Structure-Templates.html#Structure-Templates][StructureTemplates]]
    ~C-c C-,~
*** Evaluating code blocks
    [[https://orgmode.org/manual/Evaluating-Code-Blocks.html][link]]

** Export
*** Commands
    =C-c C-e= and then other options.
*** Code blocks
    [[https://orgmode.org/manual/Languages.html#Languages][Languages]] and [[https://orgmode.org/manual/Using-Header-Arguments.html#Using-Header-Arguments][Header arguments]].
    - inline, use ==%s== or =src_<language>[header arguments]{codes}=.
      A useful example, =src_latex[:exports code]{$\alpha$}=.
    - Use =#+begin_src <language>[<header arguments>]{<body>} #+end_src= and
      =[header arguments]= is optional. To insert these, use =C-c, C-,=.
*** Latex
    Here are examples
    1. Normally insert latex codes
    #+begin_src latex
      The radius of the sun is R_sun = 6.96 x 10^8 m.  On the other
      hand, the radius of Alpha Centauri is R_{Alpha Centauri} = 1.28 x
      R_{sun}.

      \begin{equation}                        % arbitrary environments,
      x=\sqrt{b}                              % even tables, figures
      \end{equation}                          % etc

      If $a^2=b$ and \( b=2 \), then the solution must be
      either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].
    #+end_src
    2. Headers and sectioning structures, [[https://orgmode.org/manual/LaTeX-header-and-sectioning.html][link]]
       #+begin_src org
       #+LATEX_CLASS_OPTIONS: [a4paper,11pt,twoside,twocolumn]
       #+LATEX_CLASS: article
       #+LATEX_CLASS_OPTIONS: [a4paper]
       #+LATEX_HEADER: \usepackage{xyz}
       * Headline 1
	 some text
       * Headline 2
	 some more text
       #+end_src
    3. Quoting, [[https://orgmode.org/manual/Quoting-LaTeX-code.html#Quoting-LaTeX-code][link]]
       - Inserting in-line quoted with @ symbols: =Code embedded
	 in-line @@latex:any arbitrary LaTeX code@@ in a paragraph.=
       - Inserting as one or more keyword lines in the Org file:
	 =#+LATEX: any arbitrary LaTeX code=
       - Inserting as an export block in the Org file, where the
	 back-end exports any code between begin and end markers:
	 #+begin_src org
	 #+BEGIN_EXPORT latex
	   any arbitrary LaTeX code
	 #+END_EXPORT
	 #+end_src

** Paragraphs
   Paragraphs are separated by at least one empty line. Regarding formats:
   VERSE, QUOTE and CENTER,
   details can be found in [[https://orgmode.org/guide/Paragraphs.html#Paragraphs][Paragra
* Compilation
** C++
*** Simplest codes
    =M-x compile= and then clean commands, type in =g++ hello_world.cpp=.
*** Makefile exists
    ~M-x compile~ and then ~make~.
* TRAMP
** cleanup
   [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Cleanup-remote-connections.html][Cleanup-remote-connections]]
   - =tramp-cleanup-connection=
   - =tramp-cleanup-this-connection=
   - =tramp-cleanup-all-connections=
   - =tramp-cleanup-all-buffers=
* Miscellaneous
** Font Lock mode
   Please check this [[https://www.emacswiki.org/emacs/FontLockMode][wiki]] link. In a nutshell, it is a minor mode helping
   highlight the file according to the programming syntaxes.
** Insert the current date to the current buffer
   ~C-u M-! date~. See more in the [[https://www.emacswiki.org/emacs/InsertingTodaysDate][link]] and [[https://stackoverflow.com/questions/251908/how-can-i-insert-current-date-and-time-into-a-file-using-emacs][link]].
** Define a new keybinidng
   I read this [[https://stackoverflow.com/questions/906368/what-is-the-difference-between-global-set-key-and-define-key-global-map-in-e][link]]. Please consult the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html][guide]] for further information.
   - =global-set-key= helps you define keybindings globally. The two examples
     below serve the similar functionality.
     #+begin_src org
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key (kbd "C-c l" 'org-store-link))
     #+end_src
   - =define-key=, I show an example here. It is taken from the [[https://github.com/purcell/emacs.d/blob/master/lisp/init-org.el][purcell-emacs]].
     #+begin_src org
     (define-key org-mode-map (kbd "C-M-<up>"))
     #+end_src
** Desktop
*** bookmark
    'desktop-path' is searched to find a desktop file to load.
    if you use Bookmark+,
    then you have any number of desktops and use them as bookmarks,
    jumping from one to another at anytime.
    You create a desktop bookmark using =C-x r K=
    (command 'bmkp-set-desktop-bookmark')
