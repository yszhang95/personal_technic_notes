* Knowledge from Developer user-guide
All of the following are based on
[[rmail:http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/ForApplicationDeveloper/fo/BookForApplicationDevelopers.pdf][Geant4.10.6BookForApplicationDevelopers]].
Sections follow the same order in the user guide.

** Installation
*** Instructions from official website
  You can begin installing Geant4 by downloading the [[https://cern.ch/geant4/support/download][code]] from the
  distribution page. Next, consult the Installation [[http://geant4-userdoc.web.cern.ch/geant4-userdoc/UsersGuides/InstallationGuide/html/][Guide]] for the
  instructions required to set up Geant4 in your computing
  environment.
*** What I did
**** MacOS
  On MacOS, I execute in terminal src_sh[:exports code]{sudo port install geant4}.
**** TODO Debian
** An example
*** A main() program
**** Source code
 #+name: simplest-example-of-main
 #+begin_src c++
 #include "G4RunManager.hh"
 #include "G4UImanager.hh"
 #include "ExG4DetectorConstruction01.hh"
 #include "ExG4PhysicsList00.hh"
 #include "ExG4ActionInitialization01.hh"
 int main()
 {
   // construct the default run manager
   G4RunManager* runManager = new G4RunManager;
   // set mandatory initialization classes
   // ExG4DetectorConstruction0 is user initialization of
   // detector setup, including its geometry,
   // the materials used in its construction,
   // a definition of its sensitive regions and
   // the readout schemes of the sensitive regions.
   // ExG4DetectorConstruction0 is derived from G4VUserDetectorConstruction
   runManager->SetUserInitialization(new ExG4DetectorConstruction01);
   // ExG4PhysicsList0 is a user class derived from G4VUserPhysicsList
   //
   runManager->SetUserInitialization(new ExG4PhysicsList00);
   runManager->SetUserInitialization(new ExG4ActionInitialization01);
   // initialize G4 kernel
   runManager->Initialize();
   // get the pointer to the UI manager and set verbosities
   G4UImanager* UI = G4UImanager::GetUIpointer();
   UI->ApplyCommand("/run/verbose 1");
   UI->ApplyCommand("/event/verbose 1");
   UI->ApplyCommand("/tracking/verbose 1");
   // start a run
   int numberOfEvent = 3; runManager->BeamOn(numberOfEvent);
   // job termination
   delete runManager;
   return 0;
 }
 #+end_src
**** G4RunManager
    It must be created. It controls the flow the program and manages the
    event loop(s) within a run. It cannot be used multi-threadedly. Use
    G4MTRunManager instead

* Knowledge from summer school
I checked Geant4 Course at [[https://agenda.infn.it/event/33233/][XX Seminar on Software for Nuclear,
Sub-nuclear and Applied Physics]].

** Introduction and concepts
The link to the course is [[https://agenda.infn.it/event/33233/sessions/24311/attachments/106153/149454/Pandola%20-%20Geant4-Intro.pdf][here]].

Geant4 is a toolkit (= a collection of tools), i.e., you /cannot/ run it
out of the box. You must /write an application/, which /uses/ Geant4 tools.
*** Required
*** Optional

*** The main() program

**** Required

**** Optional

*** Build an application
*** Materials and geometry
*** Generation of a primary event
*** Physics processes
* Knowledge from the attempts
*** Miscellaneous
**** Disable Decay
See [[https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/TrackingAndPhysics/physicsProcess.html?#particle-decay-process][Documentation]].
#+begin_quote
Decay for some particles may be switched on or off by using
=G4ParticleDefinition::SetPDGStable()= as well as ~ActivateProcess()~ and
=InActivateProcess()= methods of ~G4ProcessManager~.
#+end_quote

An example I tried is:
#+begin_src C++
  G4ParticleDefinition *pionDef = particleTable->FindParticle("pi+");
  // a setup for electron, https://apc.u-paris.fr/~franco/g4doxy/html/classG4Electron.html
  pionDef->SetPDGStable(true);
  pionDef->SetPDGLifeTime(-1);
  pionDef->SetDecayTable(NULL);

  G4ProcessManager *manager =  pionDef->GetProcessManager();
  // maybe other decay type, G4DecayProcessType.hh
  // https://apc.u-paris.fr/~franco/g4doxy/html/G4DecayProcessType_8hh-source.html#l00043
  manager->SetProcessActivation(static_cast<int>(DECAY), false);
#+end_src
* Knowledge from forum posts
** Dump available GEANT4 *built-in* physics processes
Reference is [[https://geant4-forum.web.cern.ch/t/get-process-type-and-subtype-table/10381/2][here]].
*** Dump all *built-in* processes along with their type and subtype tables
The macro command (UI command) is =/run/particle/dumpOrderingParam=.  No
matter the it is defined in user physics lists, built-in processes
known by GEANT4 are dumped. User defined custom processes are not
included. The type and subtype of the processes are also given.

*** Dump all processes for a given particle
The macro commands are
#+begin_example
  /paritcle/select e-
  /particle/process/dump
#+end_example
It will *not* tell you the subtype assignment but the name and the type
as a string.

** Get the step's process name
Reference is [[https://geant4-forum.web.cern.ch/t/how-to-get-the-steps-processname-and-print-it-out/5057][here]].

Given a instance of =G4Step=, ~step~, try
#+begin_src C++
    const G4String& procName =
      step->GetPreStepPoint()->GetProcessDefinedStep()->GetProcessName();
    G4cout << "ProcName: " << procName << G4endl;
#+end_src
Before dereferencing a pointer, it is better to try if it is null.  In
this case, it is checking
=step->GetPreStepPoint()->GetProcessDefinedStep()=.
